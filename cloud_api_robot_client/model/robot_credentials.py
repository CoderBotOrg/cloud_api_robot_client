# coding: utf-8

"""
    CoderBot Cloud API - Robot only - OpenAPI 3.0

    CoderBot Cloud API - Robot only  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Contact: info@coderbot.org
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from cloud_api_robot_client import schemas  # noqa: F401


class RobotCredentials(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            token = schemas.StrSchema
            
            
            class org_name(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 64
                    min_length = 1
            
            
            class org_description(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 256
                    min_length = 0
            __annotations__ = {
                "token": token,
                "org_name": org_name,
                "org_description": org_description,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["token"]) -> MetaOapg.properties.token: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["org_name"]) -> MetaOapg.properties.org_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["org_description"]) -> MetaOapg.properties.org_description: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["token", "org_name", "org_description", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["token"]) -> typing.Union[MetaOapg.properties.token, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["org_name"]) -> typing.Union[MetaOapg.properties.org_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["org_description"]) -> typing.Union[MetaOapg.properties.org_description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["token", "org_name", "org_description", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        token: typing.Union[MetaOapg.properties.token, str, schemas.Unset] = schemas.unset,
        org_name: typing.Union[MetaOapg.properties.org_name, str, schemas.Unset] = schemas.unset,
        org_description: typing.Union[MetaOapg.properties.org_description, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RobotCredentials':
        return super().__new__(
            cls,
            *_args,
            token=token,
            org_name=org_name,
            org_description=org_description,
            _configuration=_configuration,
            **kwargs,
        )
